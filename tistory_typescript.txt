ESLint
프로그램을 실행하지 않고도 소스 코드를 분석해서 문법 에러, 버그를 검출해주는 도구

---------

타입스크립트는 API 호출에서 가장 큰 빛을 발한다.
interface를 통해 api의 값을 어떻게 받겠다를 많이 정한다.

================

●기본 타입 - 문자, 숫자, 배열, 튜플, 객체, 진위값 (boolean)
●함수 타입 - 파라미터, 반환 {반환 : any, void }

●interface - 변수, 함수, 함수 구조, 인덱싱, 딕셔너리, 상속
●타입 별칭 (인터페이스와 차이점) { type은 확장 X, interface는 extends 사용 }
가능한 interface 사용

●연산자를 이용한 타입 정의
0. 유니온 타입
 ㄴ장점 : 타입 가드 
            (any를 사용한 경우와 유니온을 사용한 경우 [각 타입에 맞는 메소드] ), 
 ㄴ특징 : 공통적인 멤버에만 접근 가능 
            (어떠한 값이 들어올지 모르니 공통 멤버만)
 ㄴ단점 : 유니온 타입을 이용한 선언 방식의 문제점

1. 인터섹션 타입 : 유니온과 반대 특징

두 타입의 차이점 (코드 예시 보기)

●이넘 : 특정 값들의 집합을 의미하는 자료형 (속성 이름 미리 정해두기)
0. 숫자형

1. 문자형

활용 사례

● 클래스 문법
클래스
프로토타입

● 제네릭 : 타입을 정해두기보단 함수 호출시 타입을 넘겨서 사용
기존 타입 정의 방식과 제네릭 정의 방식의 차이점
(타입만 다를 뿐이고 함수 로직은 같을 경우 유지보수 어렵다. 그걸 해결)



Typescript는 API 호출시 타입 중요
new Promise는 타입 추론시 promise 타입인건 알지만 비동기처리를 통해 돌려받을 값이 무엇인지 모른다.
=> Promise<unkwon>